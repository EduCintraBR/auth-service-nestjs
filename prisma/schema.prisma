datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           String      @id @default(uuid())
  email        String      @unique
  passwordHash String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  isActive     Boolean     @default(true)

  // Relações
  roles   UserRole[]
  claims  UserClaim[]
}

model Role {
  id   String   @id @default(uuid())
  name String   @unique
  // Ex.: 'ADMIN', 'USER' ...
  users UserRole[]
}

model UserRole {
  // Tabela de ligação N:N
  userId String
  roleId String
  assignedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  role Role @relation(fields: [roleId], references: [id])

  @@id([userId, roleId])
}

model UserClaim {
  id     String   @id @default(uuid())
  userId String
  name   String
  value  String

  user   User     @relation(fields: [userId], references: [id])
}

model OAuthClient {
  id             String   @id @default(uuid())
  clientId       String   @unique
  clientSecret   String?  // pode ser nulo se for PKCE
  redirectUris   String[] // array com URIs
  grants         String[] // array com quais grant_types suportados p/ esse client
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Ex.: 'password', 'authorization_code', 'refresh_token' ...
}

model AuthCode {
  id           String   @id @default(uuid())
  code         String   @unique
  redirectUri  String?
  userId       String
  clientId     String
  createdAt    DateTime @default(now())
  expiresAt    DateTime

  // PKCE
  codeChallenge       String?
  codeChallengeMethod String?

  // Se quiser, relacionar com User e OAuthClient
}

model RefreshToken {
  id         String   @id @default(uuid())
  token      String   @unique
  userId     String
  clientId   String
  createdAt  DateTime @default(now())
  expiresAt  DateTime

  // Relacionamentos
}

model AuditLog {
  id          String   @id @default(uuid())
  action      String
  userId      String?
  description String?
  createdAt   DateTime @default(now())
}

